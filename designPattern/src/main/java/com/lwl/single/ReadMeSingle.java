package com.lwl.single;

/**
 * 讲解
 * @author lwl
 * @create 2018年12月29日 上午8:58:01
 * @version 1.0
 */
public class ReadMeSingle {

	
	
	/**
	 * 单例模式是最常用到的设计模式之一，熟悉设计模式的朋友对单例模式都不会陌生。一般介绍单例模式的书籍都会提到 饿汉式 和 懒汉式 这两种实现方式。
	 * 
	 * 基本的实现思路

			单例模式要求类能够有返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）。

			单例的实现主要是通过以下两个步骤：

			 将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例；
			  在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。

	 * 
	 * 
	 *	饿汉式:
	 *		SingleEhOne
	 *		SingleEhTwo
	 *		优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。
	 *		缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。
	 * 
	 * 
	 * 	懒汉式：
	 * 		SingleLhOne
	 * 		SingleLhTwo
	 * 		SingleLhThree
	 * 		SingleLhFour
	 * 		
	 * 	静态内部类实现单例
	 * 		SingleNrClass
	 * 
	 * 	枚举实现单例
	 * 		SingleEnum	
	 * 
	 */
	
	
	
	
	
}
